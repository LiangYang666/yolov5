# parameters
nc: 80  # number of classes
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.50  # layer channel multiple

# anchors
anchors:
  - [10,10,  13,13,  17,17]  # P3/8   # zx的全部聚类 10,10,  13,13,  17,17,  22,22,  30,30,  48,44,  46,90,  105,73,  148,198
  - [22,22,  30,30,  48,44]  # P4/16 # by的全部聚类 34,19,  49,32,  85,25,  35,83,  81,42,  88,91,  179,62,  72,180,  171,221
  - [46,90,  105,73,  148,198]  # P5/32

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4    [128, 3, 2] ch_out, kernel, stride
   [-1, 3, BottleneckCSP, [128]],   # 其中number为BottleneckCSP的个数需要乘以depth_multiple  128输出通道数需要在乘上width_multiple
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 9, BottleneckCSP, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, BottleneckCSP, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 1, SPP, [1024, [5, 9, 13]]],     # [1024, [5, 9, 13]] ch_out, SPP池化kernel
   [-1, 3, BottleneckCSP, [1024, False]],  # 9
  ]

# YOLOv5 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],    # [None, 2, 'nearest']  nn.Upsample(size=None, scale_factor=None, mode='nearest', align_corners=None)
   [[-1, 6], 1, Concat, [1]],  # 12 cat backbone P4  # 上一个的特征图与序号为6的 concat 按顺序 Focus为序号零 #后第一个数字为网络序号
   [-1, 3, BottleneckCSP, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],    # 14
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # 16  cat backbone P3
   [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],  # 18
   [[-1, 14], 1, Concat, [1]],  # 19 cat head P4
   [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)  # head 要使用的特征图层序号[17, 20, 23]    [nc, anchors] 类别数,anchors
  ]

